'/bootstrap':signature(enumConcepts(Type,Concept)::'/bootstrap':pred,[Type::'/bootstrap':type,Concept::Type]).
behavior(enumConcepts('/bootstrap':list(T),Concept)::'/bootstrap':pred,!'should succeed for every concept under Type',builtin:findall(Concept,'/bootstrap':list(T),enumConcepts('/bootstrap':list(T),Concept),[[],[_]])).
'/bootstrap':defAtom(fooType::'/bootstrap':type).
enumConcepts(T,C):-'/bootstrap':checkSignature(C::T,_),\+'/bootstrap':checkSignature(C::fooType,_).
'/bootstrap':signature(recursiveEnumConcepts(Type,TTerm)::'/bootstrap':pred,[Type::'/bootstrap':type,TTerm::'/bootstrap':typedTerm]).
'/bootstrap':defAtom(example:tree::'/bootstrap':type).
'/bootstrap':defAtom(nil::example:tree).
'/bootstrap':signature(tree(L,R)::example:tree,[L::example:tree,R::example:tree]).
behavior(recursiveEnumConcepts(Type,TTerm)::'/bootstrap':pred,!'should recursively enumerate all concepts reachable from a type', (recursiveEnumConcepts('/bootstrap':list(example:tree),[]::'/bootstrap':list(_)),recursiveEnumConcepts('/bootstrap':list(example:tree),[_]::'/bootstrap':list(_)),recursiveEnumConcepts('/bootstrap':list(example:tree),nil::example:tree),recursiveEnumConcepts('/bootstrap':list(example:tree),tree(_,_)::example:tree),\+recursiveEnumConcepts('/bootstrap':list(example:tree),builtin:succ(_,_)::'/bootstrap':pred))).
recursiveEnumConcepts(Type,TTerm):-recursiveEnumConcepts(Type,TTerm,[]).
'/bootstrap':signature(recursiveEnumConcepts(Type,TTerm,History)::'/bootstrap':pred,[Type::'/bootstrap':type,TTerm::'/bootstrap':typedTerm,History::'/bootstrap':list('/bootstrap':type)]).
annotation:shrink((recursiveEnumConcepts(Type,TTerm,History):-enumConcepts(Type,Concept),recursiveEnumChildConcepts(Concept,Type,History,TTerm))).
'/bootstrap':signature(recursiveEnumChildConcepts(Concept,Type,History,TTerm)::'/bootstrap':pred,[Concept::Type,Type::'/bootstrap':type,History::'/bootstrap':list('/bootstrap':type),TTerm::'/bootstrap':typedTerm]).
recursiveEnumChildConcepts(Concept,Type,_,Concept::Type):-builtin:true.
annotation:shrink((recursiveEnumChildConcepts(Concept,Type,History,TTerm):-'/bootstrap':checkSignature(Concept::Type,Args),'/bootstrap':listMember(_::TypePrime,'/bootstrap':typedTerm,Args),\+builtin:var(TypePrime::'/bootstrap':type),\+'/bootstrap':listMember(TypePrime,'/bootstrap':type,History),recursiveEnumConcepts(TypePrime,TTerm,[Type|History]))).
