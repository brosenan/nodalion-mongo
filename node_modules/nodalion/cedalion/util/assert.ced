'/bootstrap':signature(assertEqual(Actual,Expected,T)::'/bootstrap':pred,[Actual::T,Expected::T,T::'/bootstrap':type]).
'/bootstrap':projection(assertEqual(Actual,Expected,T)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':vis(Actual::T),'/bootstrap':label(!'should equal'),'/bootstrap':vis(Expected::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)])).
behavior(assertEqual(Actual,Expected,T)::'/bootstrap':pred,!'should succeed if Actual == Expected',assertEqual(X,X,'/bootstrap':number)).
assertEqual(Actual,Expected,T):-builtin:if(builtin:equals(Actual::T,Expected::T),builtin:true,builtin:throw(notEqual(Actual,Expected,T))).
'/bootstrap':signature(notEqual(Actual,Expected,T)::'/bootstrap':exception,[Actual::T,Expected::T,T::'/bootstrap':type]).
'/bootstrap':projection(notEqual(Actual,Expected,T)::'/bootstrap':exception,'/bootstrap':horiz(['/bootstrap':label(!'actual value'),'/bootstrap':vis(Actual::T),'/bootstrap':label(!'does not match expected'),'/bootstrap':vis(Expected::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)])).
behavior(assertEqual(Actual,Expected,T)::'/bootstrap':pred,!'should throw an exception if not Actual == Expected',builtin:catch((assertEqual(X,Y,T),builtin:fail),notEqual(Actual,Expected,T),builtin:true)).
'/bootstrap':contextMenuEntry(builtin:equals(X::T,Y::T)::'/bootstrap':pred,VNs,Path,!'Convert to assertion',cpi:edit(Path,assertEqual(X,Y,T)::'/bootstrap':pred,VNs)).
'/bootstrap':signature(assertStracturallyEqual(Actual,Expected,T)::'/bootstrap':pred,[Actual::T,Expected::T,T::'/bootstrap':type]).
'/bootstrap':projection(assertStracturallyEqual(Actual,Expected,T)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':vis(Actual::T),'/bootstrap':label(!'should structurally equal'),'/bootstrap':vis(Expected::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)])).
behavior(assertStracturallyEqual(Actual,Expected,T)::'/bootstrap':pred,!'should succeed if Actual and Expected are structurally equal',assertStracturallyEqual('/Functional':pair(X,X),'/Functional':pair(Y,Y),'/Functional':pairType(T,T))).
behavior(assertStracturallyEqual(Actual,Expected,T)::'/bootstrap':pred,!'should throw an exception if X and Y are not structurally equal',builtin:catch((assertStracturallyEqual('/Functional':pair(X,X),'/Functional':pair(X,Y),'/Functional':pairType(T,T)),builtin:fail),notEqual(Act,Exp,'/Functional':pairType(T,T)),builtin:true)).
assertStracturallyEqual(X,Y,T):-builtin:if(builtin:structurallyEqual(X::T,Y::T),builtin:true,builtin:throw(notEqual(X,Y,T))).
