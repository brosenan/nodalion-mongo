'/bootstrap':signature(export(Path)::'/bootstrap':statement,[Path::'/bootstrap':string]).
'/bootstrap':projection(export(Path)::'/bootstrap':statement,'/bootstrap':horiz(['/bootstrap':label(!'Export to:'),'/bootstrap':vis(Path::'/bootstrap':string)])).
export(!'prolog/cedalion.pl').
'/bootstrap':unitTest(builtin:true).
'/bootstrap':signature(exportTo(Path)::'/bootstrap':procedure,[Path::'/bootstrap':string]).
'/bootstrap':signature(writeStatementsTo(Path)::'/bootstrap':procedure,[Path::'/bootstrap':string]).
'/bootstrap':procedure(exportTo(Path),'/bootstrap':doProc(writeStatementsTo(Path))).
annotation:shrink((cpi:procedureCommand(writeStatementsTo(Path),'/bootstrap':doAll(['/bootstrap':writeTextFile(Path,Lines),'/bootstrap':showView('/bootstrap':horiz(['/bootstrap':label(!'Exported to'),'/bootstrap':vis(cpi:immediateDescriptor(Path,[])::'/bootstrap':string)]))])):-builtin:findall(Line,'/bootstrap':string, ('/bootstrap':member(Clause,clauses,'/bootstrap':statement),'/Functional':eval(statementToLine(Clause),'/bootstrap':string,Line)),Lines))).
'/bootstrap':contextMenuEntry(export(Path)::'/bootstrap':statement,_,_,!'Export',exportTo(Path)).
'/bootstrap':signature(statementToLine(Statement)::'/Functional':expr('/bootstrap':string),[Statement::'/bootstrap':statement]).
'/Functional':def(statementToLine(Statement),'/bootstrap':string,'/Functional':where('/Functional':applyBinOp('/Functional':const(Str),'/Functional':concat,'/Functional':const(!.)),builtin:rawTermToString(Statement::'/bootstrap':statement,Str))).
annotation:shrink('/bootstrap':signature(clausesForStatement(Statement,File,VNs)::'/bootstrap':set('/bootstrap':statement),[Statement::'/bootstrap':statement,File::'/bootstrap':string,VNs::'/bootstrap':list('/bootstrap':varName)])).
annotation:shrink('/bootstrap':setDef(clausesForStatement(Statement,File,VNs),'/bootstrap':union('/bootstrap':singleton((builtin:loadedStatement(File,Statement,VNs):-builtin:true)),'/bootstrap':set(Clause, (builtin:removeAnnotations(Statement::'/bootstrap':statement,StatementWithoutAnnotations::'/bootstrap':statement),rewriteToClause(StatementWithoutAnnotations,Clauses),'/bootstrap':listMember(Clause,'/bootstrap':statement,Clauses)))),'/bootstrap':statement)).
'/bootstrap':defAtom(clauses::'/bootstrap':set('/bootstrap':statement)).
'/bootstrap':setDef(clauses,'/bootstrap':set(Clause, (builtin:loadedStatement(File,Stmnt,VNs),'/bootstrap':member(Clause,clausesForStatement(Stmnt,File,VNs),'/bootstrap':statement))),'/bootstrap':statement).
