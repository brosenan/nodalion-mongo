'/bootstrap':signature(response(T)::'/bootstrap':type,[T::'/bootstrap':type]).
'/bootstrap':signature(solution(Res)::response(T),[Res::T]).
'/bootstrap':defAtom(impred::'/bootstrap':type).
'/bootstrap':unitTest(solve(pred(builtin:plus(1,2,3)),3,'/bootstrap':number,solution(3))).
'/bootstrap':unitTest(\+solve(pred(builtin:fail),_,_,_)).
'/bootstrap':signature(pred(Pred)::impred,[Pred::'/bootstrap':pred]).
'/bootstrap':projection(pred(Pred)::impred,'/bootstrap':horiz(['/bootstrap':brackets('/bootstrap':vis(Pred::'/bootstrap':pred),8810,8811)])).
'/bootstrap':adapter(Pred::'/bootstrap':pred,pred(Pred)::impred).
'/bootstrap':signature(solve(Impred,Res,T,Resp)::'/bootstrap':pred,[Impred::impred,Res::T,T::'/bootstrap':type,Resp::response(T)]).
annotation:shrink('/bootstrap':projection(solve(Impred,Res,T,Resp)::'/bootstrap':pred,'/bootstrap':horiz(['/bootstrap':label(!find),'/bootstrap':vis(Res::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type),'/bootstrap':label(!for),'/bootstrap':vis(Impred::impred),'/bootstrap':label(!into),'/bootstrap':vis(Resp::response(T))]))).
solve(pred(Pred),Res,T,Solution):-builtin:catch((Pred,Solution::response(T)=solution(Res)::response(T)),Exception,Solution::response(T)=throws(Exception)::response(T)).
'/bootstrap':unitTest(solve(conj(pred(builtin:plus(1,2,Y)),pred(builtin:plus(Y,3,X))),X,'/bootstrap':number,_)).
'/bootstrap':unitTest(\+solve(conj(pred(builtin:plus(1,2,X)),pred(builtin:plus(2,3,X))),X,'/bootstrap':number,_)).
'/bootstrap':signature(conj(IP1,IP2)::impred,[IP1::impred,IP2::impred]).
'/bootstrap':projection(conj(IP1,IP2)::impred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':vis(IP1::impred),'/bootstrap':label(! (,))]),'/bootstrap':vis(IP2::impred)])).
'/bootstrap':alias(conj(IP1,IP2)::impred,! (,)).
solve(conj(IP1,IP2),Res,T,Sol):-solve(IP1,IP2,impred,solution(IP2)),solve(IP2,Res,T,Sol).
'/bootstrap':unitTest(solve(conj(pred(builtin:throw(someException)),true),_,_,throws(someException))).
solve(conj(IP1,IP2),Res,T,throws(Exception)):-solve(IP1,IP2,impred,throws(Exception)).
'/bootstrap':defAtom(true::impred).
'/bootstrap':projection(true::impred,'/bootstrap':symbol(8868)).
'/bootstrap':default(true::impred).
'/bootstrap':alias(true::impred,!'T').
'/bootstrap':unitTest(solve(true,2,'/bootstrap':number,solution(2))).
'/bootstrap':unitTest(\+solve(true,2,'/bootstrap':number,solution(3))).
solve(true,Res,T,solution(Res)):-builtin:true.
'/bootstrap':defines((solve(Impred,_,_,_):-_),Impred::impred,'/bootstrap':semanticDefinition).
