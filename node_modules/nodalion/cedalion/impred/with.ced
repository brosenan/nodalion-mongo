'/bootstrap':signature(with(Task,Value,T,Impred)::impred,[Task::task(T),Value::T,T::'/bootstrap':type,Impred::impred]).
'/bootstrap':projection(with(Task,Value,T,Impred)::impred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!with),'/bootstrap':vis(Task::task(T)),'/bootstrap':symbol(8680),'/bootstrap':vis(Value::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Impred::impred)])])).
'/util':behavior(with(Task,Value,T,Impred)::impred,!'should evaluate Impred', (simulate(with(_,_,_,pred(X::'/bootstrap':number=2::'/bootstrap':number)),[],true),builtin:equals(X::'/bootstrap':number,2::'/bootstrap':number))).
annotation:shrink((solve(with(Task,Value,TPrime,Impred),X,T,S):-solve(Impred,X,T,SPrime),builtin:if(SPrime::response(T)=continuation(Task,Value,TPrime,Cont,X)::response(T),solve(with(Task,Value,TPrime,Cont),X,T,S),builtin:if(SPrime::response(T)=continuation(Task1,Value1,TPrime1,Cont,X)::response(T),S::response(T)=continuation(Task1,Value1,TPrime1,with(Task,Value,TPrime,Cont),X)::response(T),S::response(T)=SPrime::response(T))))).
'/util':behavior(with(Task,Value,T,Impred)::impred,!'should answer Task with Value', (simulate(with(userInput,!me,'/bootstrap':string,greet(X)),[],true),builtin:equals(X::'/bootstrap':string,!'Hello, me'::'/bootstrap':string))).
'/bootstrap':defAtom(example:someTask::task('/bootstrap':number)).
'/util':behavior(with(Task,Value,T,Impred)::impred,!'should handle pure Impred', (solve(with(userInput,!foo,'/bootstrap':string,pred(Res::'/bootstrap':number=2::'/bootstrap':number)),Res,'/bootstrap':number,Sol),builtin:equals(Sol::response('/bootstrap':number),solution(2)::response('/bootstrap':number)))).
'/util':behavior(with(Task,Value,T,Impred)::impred,!'should handle multiple tasks',simulate(with(userInput,!foo,'/bootstrap':string,with(example:someTask,123,'/bootstrap':number,greet(X))),[],true)).
'/util':behavior(with(Task,Value,T,Impred)::impred,!'should support multiple queries of the Task',simulate(with(userInput,!foo,'/bootstrap':string,conj(greet(X),greet(Y))),[],true)).
'/bootstrap':contextMenuEntry(simulate(Impred,[task(Task,Res,T)|Rest],Next)::'/bootstrap':pred,VNs,Path,!'Convert to With',cpi:edit(Path,simulate(with(Task,Res,T,Impred),Rest,Next)::'/bootstrap':pred,VNs)).
