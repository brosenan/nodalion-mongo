'/bootstrap':signature(task(T)::'/bootstrap':type,[T::'/bootstrap':type]).
'/bootstrap':signature(task(Task,Value,T)::impred,[Task::task(T),Value::T,T::'/bootstrap':type]).
'/bootstrap':projection(task(Task,Value,T)::impred,'/bootstrap':horiz(['/bootstrap':label(!do),'/bootstrap':vis(Task::task(T)),'/bootstrap':symbol(8680),'/bootstrap':vis(Value::T),'/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)])).
'/bootstrap':signature(continuation(Task,RetVal,RetType,Continuation,Res)::response(T),[Task::task(RetType),RetVal::RetType,RetType::'/bootstrap':type,Continuation::impred,Res::T]).
'/bootstrap':projection(continuation(Task,RetVal,RetType,Continuation,Res)::response(T),'/bootstrap':horiz(['/bootstrap':label(!do),'/bootstrap':vis(Task::task(RetType)),'/bootstrap':symbol(8680),'/bootstrap':vis(RetVal::RetType),'/bootstrap':label(! (::)),'/bootstrap':vis(RetType::'/bootstrap':type),'/bootstrap':label(!then),'/bootstrap':vis(Continuation::impred),'/bootstrap':label(!into),'/bootstrap':vis(Res::T)])).
'/bootstrap':defAtom(userInput::task('/bootstrap':string)).
'/bootstrap':unitTest(solve(task(userInput,Str,'/bootstrap':string),Res,T,continuation(userInput,Str,'/bootstrap':string,true,Res))).
solve(task(Task,Ret,RetType),Res,ResType,continuation(Task,Ret,RetType,true,Res)):-builtin:true.
'/bootstrap':unitTest(solve(annotation:parentheses(conj(task(userInput,Str,'/bootstrap':string),pred(builtin:strcat(Str,!'X',Res)))),Res,'/bootstrap':string,continuation(userInput,Str,'/bootstrap':string,conj(true,pred(builtin:strcat(Str,!'X',Res))),Res))).
'/bootstrap':unitTest(\+solve(conj(task(userInput,Str,'/bootstrap':string),pred(builtin:strcat(Str,!'X',Res))),Res,'/bootstrap':string,continuation(userInput,Str1,'/bootstrap':string,pred(builtin:true),_))).
annotation:shrink((solve(annotation:parentheses(conj(A,B)),Res,ResT,continuation(Task,Ret,RetT,annotation:parentheses(conj(APrime,B)),Res)):-solve(A,Res,ResT,continuation(Task,Ret,RetT,APrime,Res)))).
'/bootstrap':adapter(Task::task(T),task(Task,Value,T)::impred).
