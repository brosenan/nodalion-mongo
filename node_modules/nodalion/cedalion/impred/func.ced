'/bootstrap':signature(expr(T)::'/bootstrap':type,[T::'/bootstrap':type]).
'/bootstrap':signature(eval(Expr,T,Val)::impred,[Expr::expr(T),T::'/bootstrap':type,Val::T]).
'/bootstrap':projection(eval(Expr,T,Val)::impred,'/bootstrap':horiz(['/bootstrap':vis(Val::T),'/bootstrap':halfSize('/bootstrap':horiz(['/bootstrap':label(! (::)),'/bootstrap':vis(T::'/bootstrap':type)])),'/bootstrap':symbol(8656),'/bootstrap':vis(Expr::expr(T))])).
'/bootstrap':signature(pureExpr(Expr)::expr(T),[Expr::'/Functional':expr(T)]).
'/bootstrap':projection(pureExpr(Expr)::expr(T),'/bootstrap':horiz(['/bootstrap':brackets('/bootstrap':vis(Expr::'/Functional':expr(T)),8810,8811)])).
'/bootstrap':adapter(Expr::'/Functional':expr(T),pureExpr(Expr)::expr(T)).
'/bootstrap':adapter(Val::T,pureExpr('/Functional':const(Val))::expr(T)).
'/bootstrap':unitTest(simulate(eval(pureExpr('/Functional':const(2)),'/bootstrap':number,2),[],true)).
clause(eval(pureExpr(Expr),T,V),pred('/Functional':eval(Expr,T,V))).
'/bootstrap':signature(binop(A,Op,B)::expr(T),[A::expr(T),Op::'/Functional':binOp(T),B::expr(T)]).
'/bootstrap':projection(binop(A,Op,B)::expr(T),'/bootstrap':horiz(['/bootstrap':vis(A::expr(T)),'/bootstrap':vis(Op::'/Functional':binOp(T)),'/bootstrap':vis(B::expr(T))])).
'/bootstrap':adapter(Op::'/Functional':binOp(T),binop(A,Op,B)::expr(T)).
'/bootstrap':unitTest(simulate(eval(binop(pureExpr('/Functional':const(1)),'/Functional':numPlus,pureExpr('/Functional':const(2))),'/bootstrap':number,3),[],true)).
'/bootstrap':unitTest(\+simulate(eval(binop(pureExpr('/Functional':const(1)),'/Functional':numPlus,pureExpr('/Functional':const(2))),'/bootstrap':number,4),[],true)).
clause(eval(binop(A,Op,B),T,V),conj(eval(A,T,APrime),conj(eval(B,T,BPrime),pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(APrime),Op,'/Functional':const(BPrime)),T,V))))).
'/bootstrap':signature(call(Task)::expr(T),[Task::task(T)]).
'/bootstrap':adapter(Task::task(T),call(Task)::expr(T)).
'/bootstrap':unitTest(simulate(eval(binop(call(userInput),'/Functional':concat,pureExpr('/Functional':const(!' world'))),'/bootstrap':string,!'hello world'),[task(userInput,!hello,'/bootstrap':string)],true)).
'/bootstrap':unitTest(\+simulate(eval(call(userInput),'/bootstrap':string,!hello),[],true)).
clause(eval(call(Task),T,Val),task(Task,Val,T)).
'/bootstrap':defAtom(greeting::expr('/bootstrap':string)).
'/bootstrap':signature(defFunc(Def,T,Expr)::'/bootstrap':statement,[Def::expr(T),T::'/bootstrap':type,Expr::expr(T)]).
'/bootstrap':projection(defFunc(Def,T,Expr)::'/bootstrap':statement,'/bootstrap':horiz(['/bootstrap':vis(T::'/bootstrap':type),'/bootstrap':vis(Def::expr(T)),'/bootstrap':symbol(8797),'/bootstrap':vis(Expr::expr(T))])).
'/bootstrap':alias(defFunc(Def,T,Expr)::'/bootstrap':statement,!'=def (impure)').
defFunc(greeting,'/bootstrap':string,binop(pureExpr('/Functional':const(!'hello, ')),'/Functional':concat,call(userInput))).
'/bootstrap':unitTest(simulate(eval(greeting,'/bootstrap':string,!'hello, impred'),[task(userInput,!impred,'/bootstrap':string)],true)).
'/bootstrap':unitTest(\+simulate(eval(greeting,'/bootstrap':string,!'foo bar'),[],true)).
defFunc(Def,T,Expr)~>clause(eval(Def,T,V),eval(Expr,T,V)).
'/bootstrap':defines(clause(eval(F,T,_),_),F::expr(T),'/bootstrap':semanticDefinition).
