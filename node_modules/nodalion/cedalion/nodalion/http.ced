'/bootstrap':defAtom(app::'/bootstrap':type).
'/bootstrap':defAtom(example:myApp::app).
'/bootstrap':defAtom(handler::'/bootstrap':type).
'/bootstrap':defAtom(httpMethod::'/bootstrap':type).
'/bootstrap':signature(serve(App,Method,Path,Handlers)::'/bootstrap':statement,[App::app,Method::httpMethod,Path::'/bootstrap':string,Handlers::'/bootstrap':list(handler)]).
'/bootstrap':projection(serve(App,Method,Path,Handlers)::'/bootstrap':statement,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!app),'/bootstrap':vis(App::app),'/bootstrap':label(!serves),'/bootstrap':vis(Method::httpMethod),'/bootstrap':vis(Path::'/bootstrap':string),'/bootstrap':label(!'as:')]),'/bootstrap':horiz(['/bootstrap':label(!'    '),cpi:vis(Handlers::'/bootstrap':list(handler),'/bootstrap':vert)])])).
'/bootstrap':alias(serve(App,Method,Path,Handlers)::'/bootstrap':statement,!app).
'/bootstrap':signature(outputText(ContentType,Text)::handler,[ContentType::'/bootstrap':string,Text::'/bootstrap':string]).
'/bootstrap':defAtom(get::httpMethod).
'/bootstrap':projection(get::httpMethod,'/bootstrap':label(!'GET')).
serve(example:myApp,get,!'/hello',[outputText(!'text/plain',!'Hello, World')]).
'/bootstrap':signature(serveHandlers(App,Method,Path,Handlers)::'/impred':impred,[App::app,Method::httpMethod,Path::'/bootstrap':string,Handlers::'/bootstrap':list(handler)]).
serve(App,Method,Path,Handlers)~>'/impred':clause(serveHandlers(App,Method,Path,Handlers),'/impred':true).
'/bootstrap':signature(with(Ctx,Impred,Handlers)::handler,[Ctx::json,Impred::'/impred':impred,Handlers::'/bootstrap':list(handler)]).
'/bootstrap':projection(with(Ctx,Impred,Handlers)::handler,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!with),'/bootstrap':vis(Ctx::json),'/bootstrap':label(!'do:')]),'/bootstrap':horiz(['/bootstrap':label(!'    '),cpi:vis(Handlers::'/bootstrap':list(handler),'/bootstrap':vert)]),'/bootstrap':horiz(['/bootstrap':label(!where),'/bootstrap':vis(Impred::'/impred':impred)])])).
'/bootstrap':signature('str2num'(Str)::'/Functional':expr('/bootstrap':number),[Str::'/Functional':expr('/bootstrap':string)]).
'/util':behavior('str2num'(Str)::'/Functional':expr('/bootstrap':number),!'should convert strings to numbers', ('/Functional':eval('str2num'('/Functional':const(!'-2.3')),'/bootstrap':number,Value),'/util':assertEqual(Value,-2.3,'/bootstrap':number))).
'/Functional':eval('str2num'(Str),'/bootstrap':number,Num):-'/Functional':eval(Str,'/bootstrap':string,StrPrime),builtin:rawTermToString(Num::'/bootstrap':number,StrPrime).
serve(example:myApp,get,!'/calc',[with(jsonObj([field(!query,Q)]),'/impred':pred('/Functional':eval('/Functional':applyBinOp('str2num'(asString(jsonMember('/Functional':const(Q),!a))),'/Functional':numPlus,'str2num'(asString(jsonMember('/Functional':const(Q),!b)))),'/bootstrap':number,C)),[outputJson(jsonObj([field(!result,jsonNum(C))]))])]).
'/bootstrap':signature(header(Name,Value)::handler,[Name::'/bootstrap':string,Value::'/bootstrap':string]).
'/bootstrap':projection(header(Name,Value)::handler,'/bootstrap':horiz(['/bootstrap':vis(Name::'/bootstrap':string),'/bootstrap':label(! (:)),'/bootstrap':vis(Value::'/bootstrap':string)])).
'/bootstrap':signature(objStoreGet(Hash)::handler,[Hash::'/bootstrap':string]).
'/bootstrap':projection(objStoreGet(Hash)::handler,'/bootstrap':horiz(['/bootstrap':label(!'objStore cat'),'/bootstrap':vis(Hash::'/bootstrap':string)])).
serve(example:myApp,get,!'/objStore/:hash',[with(jsonObj([field(!params,Params)]),'/impred':pred('/Functional':eval(asString(jsonMember('/Functional':const(Params),!hash)),'/bootstrap':string,Hash)),[header(!'content-type',!'text/foo'),objStoreGet(Hash)])]).
'/bootstrap':defAtom(post::httpMethod).
'/bootstrap':projection(post::httpMethod,'/bootstrap':label(!'POST')).
'/bootstrap':defAtom(objStoreBody::handler).
serve(example:myApp,post,!'/objStore',[objStoreBody,with(jsonObj([field(!body,Hash),field(!protocol,Proto),field(!headers,Headers)]),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp(asString('/Functional':const(Proto)),'/Functional':concat,'/Functional':const(!'://')),'/Functional':concat,asString(jsonMember('/Functional':const(Headers),!host))),'/Functional':concat,'/Functional':const(!'/objStore/')),'/Functional':concat,asString('/Functional':const(Hash))),'/bootstrap':string,URL)),[outputJson(jsonObj([field(!url,jsonStr(URL))]))])]).
'/bootstrap':defAtom(jsonBody::handler).
serve(example:myApp,post,!'/hello',[jsonBody,with(jsonObj([field(!body,Details)]),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(!'hello, '),'/Functional':concat,asString(jsonMember('/Functional':const(Details),!firstName))),'/Functional':concat,'/Functional':const(!' ')),'/Functional':concat,asString(jsonMember('/Functional':const(Details),!lastName))),'/bootstrap':string,Greet)),[outputText(!'text/plain',Greet)])]).
'/bootstrap':defAtom(textBody::handler).
'/bootstrap':defAtom(put::httpMethod).
'/bootstrap':projection(put::httpMethod,'/bootstrap':label(!'PUT')).
serve(example:myApp,post,!'/helloText',[textBody,with(jsonObj([field(!body,Name)]),'/impred':pred('/Functional':eval('/Functional':applyBinOp('/Functional':const(!'hello, '),'/Functional':concat,asString('/Functional':const(Name))),'/bootstrap':string,Greet)),[outputText(!'text/plain',Greet)])]).
'/bootstrap':signature(setStatus(Status)::handler,[Status::'/bootstrap':number]).
serve(example:myApp,get,!'/someStatus',[with(jsonObj([field(!query,Query)]),'/impred':pred('/Functional':eval('str2num'(asString(jsonMember('/Functional':const(Query),!status))),'/bootstrap':number,Status)),[setStatus(Status),outputText(!'text/plain',!'Sending your requested status')])]).
serve(example:myApp,get,!'/throw',[with(jsonObj([]),'/impred':pred(builtin:throw(serviceException([setStatus(400),outputText(!'text/plain',!'This comes from the exception')]))),[outputText(!'text/plain',!'no exception')])]).
'/bootstrap':signature(serviceException(Handlers)::'/bootstrap':exception,[Handlers::'/bootstrap':list(handler)]).
'/bootstrap':projection(serviceException(Handlers)::'/bootstrap':exception,'/bootstrap':horiz(['/bootstrap':label(!'Report error:'),cpi:vis(Handlers::'/bootstrap':list(handler),'/bootstrap':vert)])).
