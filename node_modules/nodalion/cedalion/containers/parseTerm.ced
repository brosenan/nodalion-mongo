'/bootstrap':signature(parseTerm(CTTerm,CName,CArgs,Cont)::'/bootstrap':pred,[CTTerm::'/bootstrap':typedTerm,CName::'/bootstrap':string,CArgs::'/bootstrap':list('/bootstrap':typedTerm),Cont::'/bootstrap':string]).
annotation:shrink((specialTerm(builtin:parseTerm(TTerm,Name,Args)::'/bootstrap':pred,parseTerm(CTTerm,CName,CArgs,Cont)::'/bootstrap':pred,Cont):-containerize(TTerm::'/bootstrap':typedTerm,CTTerm::'/bootstrap':typedTerm,Cont),containerize(Name::'/bootstrap':string,CName::'/bootstrap':string,Cont),containerize(Args::'/bootstrap':list('/bootstrap':typedTerm),CArgs::'/bootstrap':list('/bootstrap':typedTerm),Cont))).
'/util':behavior(parseTerm(TTerm,Name,Args,Cont)::'/bootstrap':pred,!'should construct a containerized term', (parseTerm(TTerm,!bar,[],!foo),builtin:parseTerm(TTerm,Name,[]),'/util':assertEqual(Name,!'foo@bar','/bootstrap':string))).
'/util':behavior(parseTerm(TTerm,Name,Args,Cont)::'/bootstrap':pred,!'should provide the original (un-containerized) name', (parseTerm(TTerm,!bar,[],!foo),parseTerm(TTerm,Name,[],!foo),'/util':assertEqual(Name,!bar,'/bootstrap':string))).
annotation:shrink((parseTerm(TTerm,Name,Args,Cont):-builtin:if(builtin:string(Name::'/bootstrap':string), (containerizeName(Name,NamePrime,Cont),builtin:parseTerm(TTerm,NamePrime,Args)), (builtin:parseTerm(TTerm,NamePrime,Args),uncontainerizeName(NamePrime,Name,Cont))))).
annotation:shrink((specialUncontainerize(parseTerm(CTTerm,CName,CTArgs,_)::'/bootstrap':pred,builtin:parseTerm(TTerm,Name,TArgs)::'/bootstrap':pred,Cont):-uncontainerize(CTTerm::'/bootstrap':typedTerm,TTerm::'/bootstrap':typedTerm,Cont),uncontainerize(CName::'/bootstrap':string,Name::'/bootstrap':string,Cont),uncontainerize(CTArgs::'/bootstrap':list('/bootstrap':typedTerm),TArgs::'/bootstrap':list('/bootstrap':typedTerm),Cont))).
