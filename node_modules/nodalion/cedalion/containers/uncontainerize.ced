'/bootstrap':signature(uncontainerize(CTTerm,TTerm,Cont)::'/bootstrap':pred,[CTTerm::'/bootstrap':typedTerm,TTerm::'/bootstrap':typedTerm,Cont::'/bootstrap':string]).
'/util':behavior(uncontainerize(CTTerm,TTerm,Cont)::'/bootstrap':pred,!'should pass non-compound terms as-is', (uncontainerize(!bar::'/bootstrap':string,BAR::'/bootstrap':string,!foo),'/util':assertEqual(BAR,!bar,'/bootstrap':string))).
'/util':behavior(uncontainerize(CTTerm,TTerm,Cont)::'/bootstrap':pred,!'should undo the working of containerize', (Pred::'/bootstrap':pred=annotation:parentheses((builtin:succ(4,X),'/Functional':eval('/Functional':'num2str'('/Functional':const(X)),'/bootstrap':string,Str),builtin:parseTerm([]::'/bootstrap':list(_),!foo,[!bar::'/bootstrap':string]),builtin:loadedStatement(!'/foo/bar','/Functional':def(pi,'/bootstrap':number,'/Functional':const(3.1415)),[])))::'/bootstrap':pred,containerize(Pred::'/bootstrap':pred,CTTerm,!bar),uncontainerize(CTTerm,PredPrime::'/bootstrap':pred,!bar),'/util':assertEqual(PredPrime,Pred,'/bootstrap':pred))).
annotation:shrink((uncontainerize(CTTerm,TTerm,Cont):-builtin:if(builtin:compound(CTTerm),builtin:if(specialUncontainerize(CTTerm,TTerm,Cont),builtin:true, (builtin:parseTerm(CTTerm,CName,CArgs),uncontainerizeName(CName,Name,Cont),uncontainerizeList(CArgs,Args,Cont),builtin:parseTerm(TTerm,Name,Args))),CTTerm=TTerm))).
'/bootstrap':signature(uncontainerizeList(CArgs,Args,Cont)::'/bootstrap':pred,annotation:changeMode([CArgs::'/bootstrap':list('/bootstrap':typedTerm),Args::'/bootstrap':list('/bootstrap':typedTerm),Cont::'/bootstrap':string],'/bootstrap':vert)).
uncontainerizeList([],[],_):-builtin:true.
annotation:shrink((uncontainerizeList([CTTerm|CTTerms],[TTerm|TTerms],Cont):-uncontainerize(CTTerm,TTerm,Cont),uncontainerizeList(CTTerms,TTerms,Cont))).
'/bootstrap':signature(specialUncontainerize(CTTerm,TTerm,Cont)::'/bootstrap':pred,[CTTerm::'/bootstrap':typedTerm,TTerm::'/bootstrap':typedTerm,Cont::'/bootstrap':string]).
